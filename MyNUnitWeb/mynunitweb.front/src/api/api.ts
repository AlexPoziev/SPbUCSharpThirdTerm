/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * MyNUnitWeb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/5".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AllFileTestResultsViewModel
 */
export interface AllFileTestResultsViewModel {
    /**
     * 
     * @type {Array<FileTestResultViewModel>}
     * @memberof AllFileTestResultsViewModel
     */
    fileTestResults?: Array<FileTestResultViewModel>;
}
/**
 * 
 * @export
 * @interface ClassTestResultViewModel
 */
export interface ClassTestResultViewModel {
    /**
     * 
     * @type {number}
     * @memberof ClassTestResultViewModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ClassTestResultViewModel
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClassTestResultViewModel
     */
    isFailed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClassTestResultViewModel
     */
    isPassed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClassTestResultViewModel
     */
    isIgnored?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ClassTestResultViewModel
     */
    testDuration?: number;
    /**
     * 
     * @type {Array<MethodTestResultViewModel>}
     * @memberof ClassTestResultViewModel
     */
    methodTestResults?: Array<MethodTestResultViewModel>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClassTestResultViewModel
     */
    validationErrors?: Array<string>;
}
/**
 * 
 * @export
 * @interface FileTestResultViewModel
 */
export interface FileTestResultViewModel {
    /**
     * 
     * @type {number}
     * @memberof FileTestResultViewModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FileTestResultViewModel
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FileTestResultViewModel
     */
    isFailed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FileTestResultViewModel
     */
    isPassed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FileTestResultViewModel
     */
    isIgnored?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FileTestResultViewModel
     */
    testDuration?: number;
    /**
     * 
     * @type {Array<ClassTestResultViewModel>}
     * @memberof FileTestResultViewModel
     */
    classTestResults?: Array<ClassTestResultViewModel>;
}
/**
 * 
 * @export
 * @interface MethodTestResultViewModel
 */
export interface MethodTestResultViewModel {
    /**
     * 
     * @type {number}
     * @memberof MethodTestResultViewModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MethodTestResultViewModel
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MethodTestResultViewModel
     */
    isFailed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodTestResultViewModel
     */
    isPassed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodTestResultViewModel
     */
    isIgnored?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MethodTestResultViewModel
     */
    testDuration?: number;
    /**
     * 
     * @type {string}
     * @memberof MethodTestResultViewModel
     */
    failReasons?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodTestResultViewModel
     */
    ignoredReason?: string;
}
/**
 * 
 * @export
 * @interface TestsTestBody
 */
export interface TestsTestBody {
    /**
     * 
     * @type {Array<Blob>}
     * @memberof TestsTestBody
     */
    files?: Array<Blob>;
}
/**
 * TestsApi - fetch parameter creator
 * @export
 */
export const TestsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestsTestHistoryGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/Tests/testHistory`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<Blob>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestsTestPost(files?: Array<Blob>, options: any = {}): FetchArgs {
            const localVarPath = `/api/Tests/test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestsApi - functional programming interface
 * @export
 */
export const TestsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestsTestHistoryGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AllFileTestResultsViewModel> {
            const localVarFetchArgs = TestsApiFetchParamCreator(configuration).apiTestsTestHistoryGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Array<Blob>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestsTestPost(files?: Array<Blob>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<FileTestResultViewModel>> {
            const localVarFetchArgs = TestsApiFetchParamCreator(configuration).apiTestsTestPost(files, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TestsApi - factory interface
 * @export
 */
export const TestsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestsTestHistoryGet(options?: any) {
            return TestsApiFp(configuration).apiTestsTestHistoryGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {Array<Blob>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestsTestPost(files?: Array<Blob>, options?: any) {
            return TestsApiFp(configuration).apiTestsTestPost(files, options)(fetch, basePath);
        },
    };
};

/**
 * TestsApi - object-oriented interface
 * @export
 * @class TestsApi
 * @extends {BaseAPI}
 */
export class TestsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public apiTestsTestHistoryGet(options?: any) {
        return TestsApiFp(this.configuration).apiTestsTestHistoryGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Array<Blob>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public apiTestsTestPost(files?: Array<Blob>, options?: any) {
        return TestsApiFp(this.configuration).apiTestsTestPost(files, options)(this.fetch, this.basePath);
    }

}
